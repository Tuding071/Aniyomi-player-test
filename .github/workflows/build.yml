name: Build mpv-android (arm64 signed release)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repo
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2Ô∏è‚É£ Setup JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3Ô∏è‚É£ Install dependencies for building native libs
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake meson ninja-build yasm nasm gettext python3 git unzip

      # 4Ô∏è‚É£ Setup Android NDK
      - name: Set up Android NDK (r26d)
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      # 5Ô∏è‚É£ Give execute permissions for build scripts
      - name: Give execute permissions
        run: chmod +x buildscripts/*.sh buildscripts/include/*.sh buildscripts/scripts/*.sh

      # 6Ô∏è‚É£ Download SDK & dependencies
      - name: Download SDK & dependencies
        run: |
          cd buildscripts
          ./download.sh
          cd ..

      # 7Ô∏è‚É£ Build native libraries (ARM64)
      - name: Build native libraries
        run: |
          cd buildscripts
          ./buildall.sh --arch arm64
          cd ..

      # 8Ô∏è‚É£ Copy native libraries to jniLibs
      - name: Copy native libraries
        run: |
          mkdir -p app/src/main/jniLibs/arm64-v8a
          cp -v buildscripts/prefix/arm64/usr/local/lib/*.so app/src/main/jniLibs/arm64-v8a/ || true

      # 9Ô∏è‚É£ Build unsigned release APK
      - name: Build unsigned release APK
        run: |
          set -x
          ./gradlew assembleRelease | tee build_error_log.txt

      # üîü Locate the unsigned APK
      - name: Locate unsigned APK
        id: locate_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/ -name "*arm64-v8a-release-unsigned.apk" | head -n 1)
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "Found APK: $APK_PATH"

      # 1Ô∏è‚É£1Ô∏è‚É£ Create a test keystore
      - name: Create test keystore
        run: |
          keytool -genkeypair \
            -v \
            -keystore test-release-key.jks \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias mpvkey \
            -storepass android \
            -keypass android \
            -dname "CN=mpv, OU=Dev, O=mpv, L=Internet, ST=World, C=US"

      # 1Ô∏è‚É£2Ô∏è‚É£ Find apksigner
      - name: Find apksigner path
        id: apksigner
        run: |
          APK_SIGNER_PATH=$(find $ANDROID_HOME/build-tools -name apksigner | sort | tail -n 1)
          echo "apksigner_path=$APK_SIGNER_PATH" >> $GITHUB_OUTPUT
          echo "Found apksigner at: $APK_SIGNER_PATH"

      # 1Ô∏è‚É£3Ô∏è‚É£ Sign the APK
      - name: Sign APK
        run: |
          "${{ steps.apksigner.outputs.apksigner_path }}" sign \
            --ks test-release-key.jks \
            --ks-pass pass:android \
            --key-pass pass:android \
            --ks-key-alias mpvkey \
            --out signed-release.apk \
            "${{ steps.locate_apk.outputs.apk_path }}"

      # 1Ô∏è‚É£4Ô∏è‚É£ Verify signed APK
      - name: Verify signed APK
        run: |
          "${{ steps.apksigner.outputs.apksigner_path }}" verify --verbose --print-certs signed-release.apk

      # 1Ô∏è‚É£5Ô∏è‚É£ Upload signed APK
      - name: Upload signed ARM64 release
        uses: actions/upload-artifact@v4
        with:
          name: mpv-android-arm64-release-signed-${{ github.run_number }}
          path: signed-release.apk

      # 1Ô∏è‚É£6Ô∏è‚É£ Upload build logs
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build_error_log
          path: build_error_log.txt
